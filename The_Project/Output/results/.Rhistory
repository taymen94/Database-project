jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
}
some_countries
# Select countries according to the country list
country
#for each country plot the aggregated themes
for (v in c(1:3)) {
tmp_themes<-countries_agg[v]
print(tmp_themes)
country<-country_names[v]
#take the country s covid cases data for the needed days
somee <- df_cases[df_cases$location == cov_countries[v],]
somee$date <-as.Date(somee$date,"%Y-%m-%d")
somee<-somee[1:122,]
#for each freq_theme plot selected
for (themee in tmp_themes) {
print(themee)
# Select countries according to the country list
country
some_countries <- s[s$countryCode == country,]
# Select themes ccording to the pattern
selection <- some_countries[grepl(themee, some_countries$themes),]
selection$date <- as.Date(selection$ts, "%Y%m%d")
# Aggregate themes selection count per day and country code
theme_data <- aggregate(x = selection$count, by = list(selection$date, selection$countryCode), FUN = sum)
colnames(theme_data) <- c('date','country','count')
f<-"data_1.csv"
write.csv(theme_data,file = f)
# Plot having country as color
p1 <- ggplot(data=theme_data, aes(as.POSIXct(date), count, colour=country)) + geom_line() + geom_point() +
theme(plot.title = element_text(size=14, face="bold"), axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_datetime(breaks=date_breaks("1 month")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) +
labs(title=paste(' Theme pattern:',themee))
grid.arrange(p1)
dev.off()
# count of the  more mentioned themes in the selection
cat('more mentioned THEMES in selection: \n')
t <- aggregate(x = selection$count, by = list(selection$themes), FUN = sum)
colnames(t) <- c('Themes','count')
print(head(t[order(t$count, decreasing = TRUE),], n=10))
#extract needed rows for the needed days
theme_data$date<-as.Date(theme_data$date,"%Y%m%d")
theme_data <- theme_data[184:305,]
#merge both datas
theme_data$new_cases<- somee$new_cases
f<-theme_data
f$date<-as.Date(f$date,"%Y-%m-%d")
#plot the corrolation
jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
}
some_countries
head(s)
cov_countries<-c("Germany","Italy","United States ")
somee
country
#take the country s covid cases data for the needed days
somee <- df_cases[df_cases$iso_code == country,]
somee
somee$date <-as.Date(somee$date,"%Y-%m-%d")
somee<-somee[1:122,]
somee
some_countries <- s[s$countryCode == country,]
some_countries
some_countries <- s[s$countryCode == cov_countries[v],]
some_countries
cov_countries<-c('GM','IT','US')
#for each country plot the aggregated themes
for (v in c(1:3)) {
tmp_themes<-countries_agg[v]
print(tmp_themes)
country<-country_names[v]
#take the country s covid cases data for the needed days
somee <- df_cases[df_cases$iso_code == country,]
somee$date <-as.Date(somee$date,"%Y-%m-%d")
somee<-somee[1:122,]
#for each freq_theme plot selected
for (themee in tmp_themes) {
print(themee)
# Select countries according to the country list
country
some_countries <- s[s$countryCode == cov_countries[v],]
some_countries
# Select themes ccording to the pattern
selection <- some_countries[grepl(themee, some_countries$themes),]
selection$date <- as.Date(selection$ts, "%Y%m%d")
# Aggregate themes selection count per day and country code
theme_data <- aggregate(x = selection$count, by = list(selection$date, selection$countryCode), FUN = sum)
colnames(theme_data) <- c('date','country','count')
f<-"data_1.csv"
write.csv(theme_data,file = f)
# Plot having country as color
p1 <- ggplot(data=theme_data, aes(as.POSIXct(date), count, colour=country)) + geom_line() + geom_point() +
theme(plot.title = element_text(size=14, face="bold"), axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_datetime(breaks=date_breaks("1 month")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) +
labs(title=paste(' Theme pattern:',themee))
grid.arrange(p1)
dev.off()
# count of the  more mentioned themes in the selection
cat('more mentioned THEMES in selection: \n')
t <- aggregate(x = selection$count, by = list(selection$themes), FUN = sum)
colnames(t) <- c('Themes','count')
print(head(t[order(t$count, decreasing = TRUE),], n=10))
#extract needed rows for the needed days
theme_data$date<-as.Date(theme_data$date,"%Y%m%d")
theme_data <- theme_data[184:305,]
#merge both datas
theme_data$new_cases<- somee$new_cases
f<-theme_data
f$date<-as.Date(f$date,"%Y-%m-%d")
#plot the corrolation
jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
}
# Select countries according to the country list
cov_countries
# Select countries according to the country list
cov_countries[v]
some_countries <- s[s$countryCode %in% cov_countries[v],]
some_countries
#for each country plot the aggregated themes
for (v in c(1:3)) {
tmp_themes<-countries_agg[v]
print(tmp_themes)
country<-country_names[v]
#take the country s covid cases data for the needed days
somee <- df_cases[df_cases$iso_code == country,]
somee$date <-as.Date(somee$date,"%Y-%m-%d")
somee<-somee[1:122,]
#for each freq_theme plot selected
for (themee in tmp_themes) {
print(themee)
# Select countries according to the country list
some_countries <- s[s$countryCode %in% cov_countries[v],]
some_countries
# Select themes ccording to the pattern
selection <- some_countries[grepl(themee, some_countries$themes),]
selection$date <- as.Date(selection$ts, "%Y%m%d")
# Aggregate themes selection count per day and country code
theme_data <- aggregate(x = selection$count, by = list(selection$date, selection$countryCode), FUN = sum)
colnames(theme_data) <- c('date','country','count')
f<-"data_1.csv"
write.csv(theme_data,file = f)
# Plot having country as color
p1 <- ggplot(data=theme_data, aes(as.POSIXct(date), count, colour=country)) + geom_line() + geom_point() +
theme(plot.title = element_text(size=14, face="bold"), axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_datetime(breaks=date_breaks("1 month")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) +
labs(title=paste(' Theme pattern:',themee))
grid.arrange(p1)
dev.off()
# count of the  more mentioned themes in the selection
cat('more mentioned THEMES in selection: \n')
t <- aggregate(x = selection$count, by = list(selection$themes), FUN = sum)
colnames(t) <- c('Themes','count')
print(head(t[order(t$count, decreasing = TRUE),], n=10))
#extract needed rows for the needed days
theme_data$date<-as.Date(theme_data$date,"%Y%m%d")
theme_data <- theme_data[184:305,]
#merge both datas
theme_data$new_cases<- somee$new_cases
f<-theme_data
f$date<-as.Date(f$date,"%Y-%m-%d")
#plot the corrolation
jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
}
#for each country plot the aggregated themes
for (v in c(1:3)) {
tmp_themes<-countries_agg[v]
print(tmp_themes)
country<-country_names[v]
#take the country s covid cases data for the needed days
somee <- df_cases[df_cases$iso_code == country,]
somee$date <-as.Date(somee$date,"%Y-%m-%d")
somee<-somee[1:122,]
#for each freq_theme plot selected
for (themee in tmp_themes) {
print(themee)
# Select countries according to the country list
some_countries <- s[s$countryCode %in% cov_countries[v],]
some_countries
# Select themes ccording to the pattern
selection <- some_countries[grepl(themee, some_countries$themes),]
selection$date <- as.Date(selection$ts, "%Y%m%d")
# Aggregate themes selection count per day and country code
theme_data <- aggregate(x = selection$count, by = list(selection$date, selection$countryCode), FUN = sum)
print("allez")
colnames(theme_data) <- c('date','country','count')
f<-"data_1.csv"
write.csv(theme_data,file = f)
# Plot having country as color
p1 <- ggplot(data=theme_data, aes(as.POSIXct(date), count, colour=country)) + geom_line() + geom_point() +
theme(plot.title = element_text(size=14, face="bold"), axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_datetime(breaks=date_breaks("1 month")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) +
labs(title=paste(' Theme pattern:',themee))
grid.arrange(p1)
dev.off()
# count of the  more mentioned themes in the selection
cat('more mentioned THEMES in selection: \n')
t <- aggregate(x = selection$count, by = list(selection$themes), FUN = sum)
colnames(t) <- c('Themes','count')
print(head(t[order(t$count, decreasing = TRUE),], n=10))
#extract needed rows for the needed days
theme_data$date<-as.Date(theme_data$date,"%Y%m%d")
theme_data <- theme_data[184:305,]
#merge both datas
theme_data$new_cases<- somee$new_cases
f<-theme_data
f$date<-as.Date(f$date,"%Y-%m-%d")
#plot the corrolation
jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
}
some_countries
themee
read.delim(themee,sep = '\t')
read.delim(themee,sep = '\t')
print(read.delim(themee,sep = '\t'))
#for each freq_theme plot selected
for (themee in tmp_themes) {
print(read.delim(themee,sep = '\t'))
print(themee)
# Select countries according to the country list
some_countries <- s[s$countryCode %in% cov_countries[v],]
some_countries
themee
# Select themes ccording to the pattern
selection <- some_countries[grepl(themee, some_countries$themes),]
selection$date <- as.Date(selection$ts, "%Y%m%d")
# Aggregate themes selection count per day and country code
theme_data <- aggregate(x = selection$count, by = list(selection$date, selection$countryCode), FUN = sum)
print("allez")
colnames(theme_data) <- c('date','country','count')
f<-"data_1.csv"
write.csv(theme_data,file = f)
# Plot having country as color
p1 <- ggplot(data=theme_data, aes(as.POSIXct(date), count, colour=country)) + geom_line() + geom_point() +
theme(plot.title = element_text(size=14, face="bold"), axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_datetime(breaks=date_breaks("1 month")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) +
labs(title=paste(' Theme pattern:',themee))
grid.arrange(p1)
dev.off()
# count of the  more mentioned themes in the selection
cat('more mentioned THEMES in selection: \n')
t <- aggregate(x = selection$count, by = list(selection$themes), FUN = sum)
colnames(t) <- c('Themes','count')
print(head(t[order(t$count, decreasing = TRUE),], n=10))
#extract needed rows for the needed days
theme_data$date<-as.Date(theme_data$date,"%Y%m%d")
theme_data <- theme_data[184:305,]
#merge both datas
theme_data$new_cases<- somee$new_cases
f<-theme_data
f$date<-as.Date(f$date,"%Y-%m-%d")
#plot the corrolation
jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
#for each country plot the aggregated themes
for (v in c(1:3)) {
tmp_themes<-countries_agg[v]
print(tmp_themes)
country<-country_names[v]
#take the country s covid cases data for the needed days
somee <- df_cases[df_cases$iso_code == country,]
somee$date <-as.Date(somee$date,"%Y-%m-%d")
somee<-somee[1:122,]
#for each freq_theme plot selected
for (themee in tmp_themes) {
print(read.delim(themee,sep = '\t'))
print(themee)
# Select countries according to the country list
some_countries <- s[s$countryCode %in% cov_countries[v],]
some_countries
themee
# Select themes ccording to the pattern
selection <- some_countries[grepl(themee, some_countries$themes),]
selection$date <- as.Date(selection$ts, "%Y%m%d")
# Aggregate themes selection count per day and country code
theme_data <- aggregate(x = selection$count, by = list(selection$date, selection$countryCode), FUN = sum)
print("allez")
colnames(theme_data) <- c('date','country','count')
f<-"data_1.csv"
write.csv(theme_data,file = f)
# Plot having country as color
p1 <- ggplot(data=theme_data, aes(as.POSIXct(date), count, colour=country)) + geom_line() + geom_point() +
theme(plot.title = element_text(size=14, face="bold"), axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_datetime(breaks=date_breaks("1 month")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) +
labs(title=paste(' Theme pattern:',themee))
grid.arrange(p1)
dev.off()
# count of the  more mentioned themes in the selection
cat('more mentioned THEMES in selection: \n')
t <- aggregate(x = selection$count, by = list(selection$themes), FUN = sum)
colnames(t) <- c('Themes','count')
print(head(t[order(t$count, decreasing = TRUE),], n=10))
#extract needed rows for the needed days
theme_data$date<-as.Date(theme_data$date,"%Y%m%d")
theme_data <- theme_data[184:305,]
#merge both datas
theme_data$new_cases<- somee$new_cases
f<-theme_data
f$date<-as.Date(f$date,"%Y-%m-%d")
#plot the corrolation
jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
}
print(themee)
tmp_themes<- read_lines(tmp_themes)
typeof(tmp_themes)
tmp_themes<- read_lines(tmp_themes[1])
typeof(tmp_themes[1])
(tmp_themes[1])
countries_agg[[1]]
separate_rows(countries_agg[[1]],sep = '\\s+')
separate_rows(countries_agg[[1]],sep = ' ')
typeof(countries_agg[[1]])
typeof(countries_agg[[1]])
typeof(countries_agg[[v]])
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], " ")[[1]])
countries_agg[[v]]
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], "  ")[[1]])
countries_agg[[1]]<-countries_agg[[1]]$X
countries_agg[[2]]<-countries_agg[[2]]$X
countries_agg[[3]]<-countries_agg[[3]]$X
countries_agg[[1]]<-read.csv(file = 'freq_themes_ DEU .csv' ,sep = ',')
countries_agg[[2]]<-read.csv(file = 'freq_themes_ ITA .csv' ,sep = ',')
countries_agg[[3]]<-read.csv(file = 'freq_themes_ USA .csv' ,sep = ',')
countries_agg[[1]]<-countries_agg[[1]]$X
countries_agg[[2]]<-countries_agg[[2]]$X
countries_agg[[3]]<-countries_agg[[3]]$X
typeof(countries_agg[[1]])
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], "  ")[[1]])
countries_agg[[v]]
countries_agg[[1]]<-read.csv(file = 'freq_themes_ DEU .csv' ,sep = ',')
countries_agg[[2]]<-read.csv(file = 'freq_themes_ ITA .csv' ,sep = ',')
countries_agg[[3]]<-read.csv(file = 'freq_themes_ USA .csv' ,sep = ',')
countries_agg[[1]]<-countries_agg[[1]]$X
countries_agg[[2]]<-countries_agg[[2]]$X
countries_agg[[3]]<-countries_agg[[3]]$X
typeof(countries_agg[[1]])
typeof(countries_agg[[1]])
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], "\\s+")[[1]])
countries_agg[[v]]
countries_agg[[1]]<-read.csv(file = 'freq_themes_ DEU .csv' ,sep = ',')
countries_agg[[2]]<-read.csv(file = 'freq_themes_ ITA .csv' ,sep = ',')
countries_agg[[3]]<-read.csv(file = 'freq_themes_ USA .csv' ,sep = ',')
countries_agg[[1]]<-countries_agg[[1]]$X
countries_agg[[2]]<-countries_agg[[2]]$X
countries_agg[[3]]<-countries_agg[[3]]$X
typeof(countries_agg[[1]])
(countries_agg[[v]])
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], '\\s+')[[1]])
countries_agg[[v]]
(countries_agg[[v]])<-tmp
countries_agg[[1]]<-read.csv(file = 'freq_themes_ DEU .csv' ,sep = ',')
countries_agg[[2]]<-read.csv(file = 'freq_themes_ ITA .csv' ,sep = ',')
countries_agg[[3]]<-read.csv(file = 'freq_themes_ USA .csv' ,sep = ',')
countries_agg[[1]]<-countries_agg[[1]]$X
countries_agg[[2]]<-countries_agg[[2]]$X
countries_agg[[3]]<-countries_agg[[3]]$X
tmp<-(countries_agg[[v]])
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], ',')[[1]])
countries_agg[[v]]
(countries_agg[[v]])<-tmp
countries_agg[[v]]<-tmp
countries_agg[[v]]
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], '//s+')[[1]])
countries_agg[[v]]
countries_agg[[v]]<-tmp
countries_agg[[v]]
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], '//s+'))
countries_agg[[v]]
print(tmp_themes)
tmp_themes<-countries_agg[v]
print(tmp_themes)
(tmp_themes[1])
(tmp_themes[[1]])
(tmp_themes[[2]])
(tmp_themes[[1]][1])
(tmp_themes[[2]][1])
(tmp_themes[[1]][2])
dim(tmp_themes[[1]])
length(tmp_themes[[1]])
themee<- tmp_themes[[1]][1]
themee
themee<- tmp_themes[[1]][2]
themee
countries_agg[[1]]<-read.csv(file = 'freq_themes_ DEU .csv' ,sep = ',')
countries_agg[[2]]<-read.csv(file = 'freq_themes_ ITA .csv' ,sep = ',')
countries_agg[[3]]<-read.csv(file = 'freq_themes_ USA .csv' ,sep = ',')
countries_agg[[1]]<-countries_agg[[1]]$X
countries_agg[[2]]<-countries_agg[[2]]$X
countries_agg[[3]]<-countries_agg[[3]]$X
#for each country plot the aggregated themes
for (v in c(1:3)) {
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], '//s+'))
tmp_themes<-countries_agg[v]
print(tmp_themes)
country<-country_names[v]
#take the country s covid cases data for the needed days
somee <- df_cases[df_cases$iso_code == country,]
somee$date <-as.Date(somee$date,"%Y-%m-%d")
somee<-somee[1:122,]
#for each freq_theme plot selected
for (i in length(tmp_themes[[1]])) {
themee<- tmp_themes[[1]][i]
# Select countries according to the country list
some_countries <- s[s$countryCode %in% cov_countries[v],]
some_countries
themee
# Select themes ccording to the pattern
selection <- some_countries[grepl(themee, some_countries$themes),]
selection$date <- as.Date(selection$ts, "%Y%m%d")
# Aggregate themes selection count per day and country code
theme_data <- aggregate(x = selection$count, by = list(selection$date, selection$countryCode), FUN = sum)
print("allez")
colnames(theme_data) <- c('date','country','count')
f<-"data_1.csv"
write.csv(theme_data,file = f)
# Plot having country as color
p1 <- ggplot(data=theme_data, aes(as.POSIXct(date), count, colour=country)) + geom_line() + geom_point() +
theme(plot.title = element_text(size=14, face="bold"), axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_datetime(breaks=date_breaks("1 month")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1) ) +
labs(title=paste(' Theme pattern:',themee))
grid.arrange(p1)
dev.off()
# count of the  more mentioned themes in the selection
cat('more mentioned THEMES in selection: \n')
t <- aggregate(x = selection$count, by = list(selection$themes), FUN = sum)
colnames(t) <- c('Themes','count')
print(head(t[order(t$count, decreasing = TRUE),], n=10))
#extract needed rows for the needed days
theme_data$date<-as.Date(theme_data$date,"%Y%m%d")
theme_data <- theme_data[184:305,]
#merge both datas
theme_data$new_cases<- somee$new_cases
f<-theme_data
f$date<-as.Date(f$date,"%Y-%m-%d")
#plot the corrolation
jpeg(file = paste("my_plot_",themee,country,".jpeg"))
#normalize
f$count<-normalize(f$count)
f$new_cases<-normalize(f$new_cases)
print()
p1<-ggplot(f, aes(x=f$date)) +  geom_line(aes(y = f$new_cases), color = "darkred") +  geom_line(aes(y = f$count), color="steelblue") + ggtitle(paste(themee," and cases"),subtitle = cor(f$count,f$new_cases))
grid.arrange(p1)
dev.off()
}
}
selection
for (v in c(1:3)) {
typeof(countries_agg[[1]])
for (v in c(1:3)) {
countries_agg[[v]]<-as.list(strsplit(countries_agg[[v]], '//s+'))
}
